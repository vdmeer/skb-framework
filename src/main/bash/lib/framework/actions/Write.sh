#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ============LICENSE_START=======================================================
#  Copyright (C) 2018 Sven van der Meer. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================
#-------------------------------------------------------------------------------

##
## Write - action to write something
##
## @author     Sven van der Meer <vdmeer.sven@mykolab.com>
## @version    0.0.6
## @since      0.0.6
##


FW_TAGS_ACTIONS["Write"]="action to write something"


function Write() {
    if [[ -z "${1:-}" ]]; then
        printf "\n"; Format help indentation 1; Format themed text explainTitleFmt "Available Commands"; printf "\n\n"
##TODO
        printf "\n"; return
    fi

    local id errno dir file sedFile str map mapsToWrite path decFile themeFile line itemId itemVal count moduleId elemId
    local cmd1="${1,,}" cmd2 cmd3 cmdString1="${1,,}" cmdString2 cmdString3
    shift; case "${cmd1}" in

        everything)
            Write all themes
            Write full cache ;;

        theme)
            if [[ "${#}" -lt 1 ]]; then Report process error "${FUNCNAME[0]}" "${cmd1}" E801 1 "$#"; return; fi
            id="${1}"
            Test existing theme id "${id}"; errno=$?; if [[ "${errno}" != 0 ]]; then printf ""; return; fi
            id="$(Get theme id ${id})"

            if [[ "${id}" != "API" ]]; then
                path="${FW_OBJECT_THM_PATH[${id}]}"
                decFile="${path}/${id}.dec"
                themeFile="${path}/${id}.thm"

                touch ${decFile}
                if [[ -w "${decFile}" ]]; then
                    rm ${decFile}
                    echo "#!/usr/bin/env bash" >> ${decFile}
                    printf "\n\n"  >> ${decFile}
                    echo "##" >> ${decFile}
                    echo "## Theme Declaration for theme ${id}" >> ${decFile}
                    echo "## generated by skb-framework on $(date)" >> ${decFile}
                    echo "##" >> ${decFile}
                    printf "\n\n"  >> ${decFile}

                    count=0
                    while read line; do
                        case "${line}" in
                            "Set themeitem "*)
                                line=${line##"Set themeitem "}
                                itemId="${line%% *}"
                                itemVal="${line#* }"
                                shopt -s extglob
                                itemVal="${itemVal##*( )}"
                                shopt -u extglob
                                echo "FW_OBJECT_TIM_VAL[${itemId}]=${itemVal}"   >> ${decFile}
                                echo "    FW_OBJECT_TIM_SOURCE[${itemId}]=${id}" >> ${decFile}
                                count=$(( count + 1 )) ;;
                        esac
                    done < ${themeFile}
                    printf "\n\n"  >> ${decFile}
                    Report application message "wrote ${count} theme items as declaration for theme ${id} to ${decFile/"${SF_HOME}"/"\$SF_HOME"}";
                fi
            else
                Report process error "${FUNCNAME[0]}" "${cmd1}" E828 "theme" "written"
            fi ;;

        all | cache | fast | full | framework | load | medium | slow | theme)
            if [[ "${#}" -lt 1 ]]; then Report process error "${FUNCNAME[0]}" "${cmdString1} cmd2" E802 1 "$#"; return; fi
            cmd2=${1,,}; shift; cmdString2="${cmd1} ${cmd2}"
            case "${cmd1}-${cmd2}" in

                all-themes)
                    for id in $(Themes has long); do
                        if [[ "${id}" != "API" ]]; then Write theme $id; fi
                    done ;;
                full-cache)
                    Write framework cache
                    for id in $(Modules has long); do
                        if [[ "${id}" != "API" ]]; then Write cache for module $id; fi
                    done
                    ;;

                framework-cache)
                    ## write format declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/formats.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_FMT_LONG >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_FMT_PATH >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write level declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/levels.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_LVL_LONG       >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_LVL_PATH       >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_LVL_CHAR_ABBR  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_LVL_STRING_THM >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write message declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/messages.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_MSG_LONG >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MSG_TYPE >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MSG_CAT  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MSG_ARGS >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MSG_TEXT >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MSG_PATH >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write mode declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/modes.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_MOD_LONG >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_MOD_PATH >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write option declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/options.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_ELEMENT_OPT_LONG  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_ELEMENT_OPT_SHORT >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_ELEMENT_OPT_LS    >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_ELEMENT_OPT_ARG   >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_ELEMENT_OPT_CAT   >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_ELEMENT_OPT_LEN   >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write phase declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/phases.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_PHA_LONG    >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_PRT_LVL >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_LOG_LVL >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_ERRCNT  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_WRNCNT  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_ERRCOD  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_PHA_PATH    >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write theme declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/themes.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_THM_LONG  >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_THM_SHORT >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_THM_LS    >> ${sedFile}; echo "" >> ${sedFile}
                        declare -p FW_OBJECT_THM_PATH  >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi

                    ## write themeitem declarations
                    file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/themeitems.cache"
                    touch ${file}
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        declare -p FW_OBJECT_TIM_LONG >> ${sedFile}; echo "" >> ${sedFile}
                        declare -A TMP__FW_OBJECT_TIM_SOURCE; declare -p TMP__FW_OBJECT_TIM_SOURCE >> ${sedFile}; echo "" >> ${sedFile}
                        declare -A TMP__FW_OBJECT_TIM_VAL;    declare -p TMP__FW_OBJECT_TIM_VAL    >> ${sedFile}; echo "" >> ${sedFile}
                        sed -e "s/declare -A/declare -A -g/g" -e "s/TMP__//g" ${sedFile} > ${file}; rm ${sedFile}
                    fi ;;

                fast-config | load-config | medium-config | slow-config)
                    case ${cmd1} in
                        fast)   file="${FW_OBJECT_CFG_VAL["RUNTIME_CONFIG_FAST"]}";     mapsToWrite="${FW_RUNTIME_MAPS_FAST}"   ;;
                        medium) file="${FW_OBJECT_CFG_VAL["RUNTIME_CONFIG_MEDIUM"]}";   mapsToWrite="${FW_RUNTIME_MAPS_MEDIUM}" ;;
                        slow)   file="${FW_OBJECT_CFG_VAL["RUNTIME_CONFIG_SLOW"]}";     mapsToWrite="${FW_RUNTIME_MAPS_SLOW}"   ;;
                        load)   file="${FW_OBJECT_CFG_VAL["RUNTIME_CONFIG_LOAD"]}";     mapsToWrite="${FW_RUNTIME_MAPS_LOAD}"   ;;
                    esac
                    if [[ -w "${file}" ]]; then
                        rm ${file}; sedFile="${file}-sed"
                        for map in ${mapsToWrite}; do declare -p $map >> ${sedFile}; echo "" >> ${sedFile}; done
                        sed -e "s/declare -A/declare -A -g/g" ${sedFile} > ${file}; rm ${sedFile}
                    fi ;;

                cache-for)
                    if [[ "${#}" -lt 1 ]]; then Report process error "${FUNCNAME[0]}" "${cmdString2} cmd3" E802 1 "$#"; return; fi
                    cmd3=${1,,}; shift; cmdString3="${cmd1} ${cmd2} ${cmd3}"
                    case "${cmd1}-${cmd2}-${cmd3}" in
                        cache-for-module)
                            if [[ "${#}" -lt 1 ]]; then Report process error "${FUNCNAME[0]}" "${cmdString3}" E801 1 "$#"; return; fi
                            moduleId="${1}"

                            if [[ "${moduleId}" != "API" ]]; then
                                Test existing module id "${moduleId}"; errno=$?; if [[ "${errno}" != 0 ]]; then return; fi
                                moduleId="$(Get module id ${moduleId})"

                                file="${FW_OBJECT_CFG_VAL["CACHE_DIR"]}/module--${moduleId}.cache"
                                touch ${file}
                                if [[ -w "${file}" ]]; then
                                    rm ${file};

                                    ## add applications
                                    if [[ "${FW_ELEMENT_APP_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_APP_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_APP_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_APP_LONG["${elemId}"]=\""${FW_ELEMENT_APP_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_APP_ORIG["${elemId}"]=\""${FW_ELEMENT_APP_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_APP_COMMAND["${elemId}"]=\""${FW_ELEMENT_APP_COMMAND["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_APP_ARGNUM["${elemId}"]=\""${FW_ELEMENT_APP_ARGNUM["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_APP_ARGS["${elemId}"]=\""${FW_ELEMENT_APP_ARGS["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_APP_PHA["${elemId}"]=\""${FW_ELEMENT_APP_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add dependencies
                                    if [[ "${FW_ELEMENT_DEP_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_DEP_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_DEP_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_DEP_LONG["${elemId}"]=\""${FW_ELEMENT_DEP_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DEP_ORIG["${elemId}"]=\""${FW_ELEMENT_DEP_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DEP_CMD["${elemId}"]=\""${FW_ELEMENT_DEP_CMD["${elemId}"]}"\"" >> ${file}
                                                if [[ -n "${FW_ELEMENT_DEP_REQUIRED_DEPENDENCIES["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_DEP_REQUIRED_DEPENDENCIES["${elemId}"]=\""${FW_ELEMENT_DEP_REQUIRED_DEPENDENCIES["${elemId}"]}"\"" >> ${file}; fi
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add dirs
                                    if [[ "${FW_ELEMENT_DIR_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_DIR_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_DIR_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_DIR_LONG["${elemId}"]=\""${FW_ELEMENT_DIR_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DIR_ORIG["${elemId}"]=\""${FW_ELEMENT_DIR_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DIR_VAL["${elemId}"]=\""${FW_ELEMENT_DIR_VAL["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DIR_MOD["${elemId}"]=\""${FW_ELEMENT_DIR_MOD["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DIR_PHA["${elemId}"]=\""${FW_ELEMENT_DIR_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add dirlists
                                    if [[ "${FW_ELEMENT_DLS_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_DLS_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_DLS_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_DLS_LONG["${elemId}"]=\""${FW_ELEMENT_DLS_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DLS_ORIG["${elemId}"]=\""${FW_ELEMENT_DLS_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DLS_VAL["${elemId}"]=\""${FW_ELEMENT_DLS_VAL["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DLS_MOD["${elemId}"]=\""${FW_ELEMENT_DLS_MOD["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_DLS_PHA["${elemId}"]=\""${FW_ELEMENT_DLS_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add files
                                    if [[ "${FW_ELEMENT_FIL_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_FIL_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_FIL_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_FIL_LONG["${elemId}"]=\""${FW_ELEMENT_FIL_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FIL_ORIG["${elemId}"]=\""${FW_ELEMENT_FIL_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FIL_VAL["${elemId}"]=\""${FW_ELEMENT_FIL_VAL["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FIL_MOD["${elemId}"]=\""${FW_ELEMENT_FIL_MOD["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FIL_PHA["${elemId}"]=\""${FW_ELEMENT_FIL_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add filelists
                                    if [[ "${FW_ELEMENT_FLS_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_FLS_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_FLS_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_FLS_LONG["${elemId}"]=\""${FW_ELEMENT_FLS_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FLS_ORIG["${elemId}"]=\""${FW_ELEMENT_FLS_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FLS_VAL["${elemId}"]=\""${FW_ELEMENT_FLS_VAL["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FLS_MOD["${elemId}"]=\""${FW_ELEMENT_FLS_MOD["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_FLS_PHA["${elemId}"]=\""${FW_ELEMENT_FLS_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add parameters
                                    if [[ "${FW_ELEMENT_PAR_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_PAR_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_PAR_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_PAR_LONG["${elemId}"]=\""${FW_ELEMENT_PAR_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PAR_ORIG["${elemId}"]=\""${FW_ELEMENT_PAR_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PAR_DEFVAL["${elemId}"]=\""${FW_ELEMENT_PAR_DEFVAL["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PAR_PHA["${elemId}"]=\""${FW_ELEMENT_PAR_PHA["${elemId}"]}"\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add projects
                                    if [[ "${FW_ELEMENT_PRJ_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_PRJ_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_PRJ_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_PRJ_LONG["${elemId}"]=\""${FW_ELEMENT_PRJ_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_ORIG["${elemId}"]=\""${FW_ELEMENT_PRJ_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_MODES["${elemId}"]=\""${FW_ELEMENT_PRJ_MODES["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_PATH["${elemId}"]=\""${FW_ELEMENT_PRJ_PATH["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_PATH_TEXT["${elemId}"]=\""${FW_ELEMENT_PRJ_PATH_TEXT["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_FILE["${elemId}"]=\""${FW_ELEMENT_PRJ_FILE["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_PRJ_TGTS["${elemId}"]=\""${FW_ELEMENT_PRJ_TGTS["${elemId}"]}"\"" >> ${file}
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_APP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_APP["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_APP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_DEP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_DEP["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_DEP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_PAR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_PAR["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_PAR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_TSK["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_TSK["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_TSK["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_FILE["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_FILE["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_FILE["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_FILELIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_FILELIST["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_FILELIST["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_DIR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_DIR["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_DIR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_PRJ_REQUIRED_DIRLIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_PRJ_REQUIRED_DIRLIST["${elemId}"]=\""${FW_ELEMENT_PRJ_REQUIRED_DIRLIST["${elemId}"]}"\"" >> ${file}; fi
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add scenarios
                                    if [[ "${FW_ELEMENT_SCN_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_SCN_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_SCN_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_SCN_LONG["${elemId}"]=\""${FW_ELEMENT_SCN_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SCN_ORIG["${elemId}"]=\""${FW_ELEMENT_SCN_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SCN_MODES["${elemId}"]=\""${FW_ELEMENT_SCN_MODES["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SCN_PATH["${elemId}"]=\""${FW_ELEMENT_SCN_PATH["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SCN_PATH_TEXT["${elemId}"]=\""${FW_ELEMENT_SCN_PATH_TEXT["${elemId}"]}"\"" >> ${file}
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_APP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_APP["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_APP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_DEP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_DEP["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_DEP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_PAR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_PAR["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_PAR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_TSK["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_TSK["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_TSK["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_FILE["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_FILE["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_FILE["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_FILELIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_FILELIST["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_FILELIST["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_DIR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_DIR["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_DIR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SCN_REQUIRED_DIRLIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SCN_REQUIRED_DIRLIST["${elemId}"]=\""${FW_ELEMENT_SCN_REQUIRED_DIRLIST["${elemId}"]}"\"" >> ${file}; fi
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add sites
                                    if [[ "${FW_ELEMENT_SIT_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_SIT_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_SIT_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_SIT_LONG["${elemId}"]=\""${FW_ELEMENT_SIT_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SIT_ORIG["${elemId}"]=\""${FW_ELEMENT_SIT_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SIT_PATH["${elemId}"]=\""${FW_ELEMENT_SIT_PATH["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SIT_PATH_TEXT["${elemId}"]=\""${FW_ELEMENT_SIT_PATH_TEXT["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_SIT_FILE["${elemId}"]=\""${FW_ELEMENT_SIT_FILE["${elemId}"]}"\"" >> ${file}
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_APP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_APP["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_APP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_DEP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_DEP["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_DEP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_PAR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_PAR["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_PAR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_TSK["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_TSK["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_TSK["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_FILE["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_FILE["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_FILE["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_FILELIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_FILELIST["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_FILELIST["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_DIR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_DIR["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_DIR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_SIT_REQUIRED_DIRLIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_SIT_REQUIRED_DIRLIST["${elemId}"]=\""${FW_ELEMENT_SIT_REQUIRED_DIRLIST["${elemId}"]}"\"" >> ${file}; fi
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi

                                    ## add tasks
                                    if [[ "${FW_ELEMENT_TSK_LONG[*]}" != "" ]]; then
                                        for elemId in ${!FW_ELEMENT_TSK_LONG[@]}; do
                                            if [[ "${FW_ELEMENT_TSK_ORIG[${elemId}]}" == "${moduleId}" ]]; then
                                                echo "FW_ELEMENT_TSK_LONG["${elemId}"]=\""${FW_ELEMENT_TSK_LONG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_TSK_ORIG["${elemId}"]=\""${FW_ELEMENT_TSK_ORIG["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_TSK_MODES["${elemId}"]=\""${FW_ELEMENT_TSK_MODES["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_TSK_PATH["${elemId}"]=\""${FW_ELEMENT_TSK_PATH["${elemId}"]}"\"" >> ${file}
                                                echo "FW_ELEMENT_TSK_PATH_TEXT["${elemId}"]=\""${FW_ELEMENT_TSK_PATH_TEXT["${elemId}"]}"\"" >> ${file}
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_APP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_APP["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_APP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_DEP["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_DEP["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_DEP["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_PAR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_PAR["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_PAR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_TSK["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_TSK["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_TSK["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_FILE["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_FILE["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_FILE["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_FILELIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_FILELIST["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_FILELIST["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_DIR["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_DIR["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_DIR["${elemId}"]}"\"" >> ${file}; fi
                                                if [[ -n "${FW_ELEMENT_TSK_REQUIRED_DIRLIST["${elemId}"]:-}" ]]; then echo "FW_ELEMENT_TSK_REQUIRED_DIRLIST["${elemId}"]=\""${FW_ELEMENT_TSK_REQUIRED_DIRLIST["${elemId}"]}"\"" >> ${file}; fi
                                                echo "alias ${elemId}=\"Execute task ${elemId}\"" >> ${file}
                                                echo "" >> ${file}
                                            fi
                                        done
                                    fi
                                fi
                            else
                                Report process error "${FUNCNAME[0]}" "${cmd1}" E828 "module" "written"
                            fi ;;

                        *)
                            Report process error "${FUNCNAME[0]}" "cmd3" E803 "${cmdString3}"; return ;;
                    esac ;;

                *)
                    Report process error "${FUNCNAME[0]}" "cmd2" E803 "${cmdString2}"; return ;;
            esac ;;
        *)
            Report process error "${FUNCNAME[0]}" E803 "${cmdString1}"; return ;;
    esac
}
